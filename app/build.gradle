import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.josebraz.myapplication"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions "version"
    productFlavors {
        demo {
            dimension "version"
        }
        standard {
            dimension "version"
        }
        full {
            dimension "version"
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion '1.6.10'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.+'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"

    final currentFlavor = getCurrentFlavor()
    final isSync = currentFlavor == ""

    final commonModules = [":base"]
    var featureModules = file("../features").listFiles()
            .collect {":features:${it.name}" }

    if (!isSync) {
        if (currentFlavor !in ["standard", "full"]) {
            featureModules -= ":features:feature1"
        }
        if (currentFlavor !in ["full"]) {
            featureModules -= ":features:feature2"
        }
    }

    (commonModules + featureModules).each {
        if (!isSync) {
            println("Building app with $it...")
        }
        implementation project(it)
    }
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern
    if(tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("bundle"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else
        return ""
}